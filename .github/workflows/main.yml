name: Main foodgram workflow

on:
  push:
    branches:
      - master

jobs:
  tests:
    runs-on: ubuntu-latest
    steps:
    - name: Копируем код проекта
      uses: actions/checkout@v3
    - name: Устанавливаем Python
      uses: actions/setup-python@v4
      with:
        python-version: 3.11
    - name: Устанавливаем зависимости, flake8 и flake8-isort
      run: |
        python -m pip install --upgrade pip 
        pip install flake8==6.0.0 flake8-isort==6.0.0
    - name: Запускаем flake8
      run: python -m flake8 backend/
  
  build_and_push_to_docker_hub:
    name: Push образов Docker 
    runs-on: ubuntu-latest
    needs: tests
    steps:
      - name: Получение исходного кода из репозитория
        uses: actions/checkout@v3
      - name: Установка сборщика контейнеров Docker
        uses: docker/setup-buildx-action@v2
      - name: Авторизация на Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }} 
          password: ${{ secrets.DOCKER_PASSWORD }}
      - name: Одновременный билд и пуш образа в Docker Hub
        uses: docker/build-push-action@v4
        with:
          context: ./backend/
          push: true
          tags: sof07/foodgram_backend:latest 

  build_frontend_and_push_to_docker_hub:
    name: Push frontend Docker image to DockerHub
    runs-on: ubuntu-latest
    steps:
      - name: Получение исходного кода из репозитория
        uses: actions/checkout@v3
      - name: Установка сборщика контейнеров
        uses: docker/setup-buildx-action@v2
      - name: Авторизация 
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
      - name: Push на DockerHub
        uses: docker/build-push-action@v4
        with:
          context: ./frontend/
          push: true
          tags: sof07/foodgram_frontend:latest 
  build_gateway_and_push_to_docker_hub:
    name: Push gateway Docker образ на DockerHub
    runs-on: ubuntu-latest
    steps:
      - name: Получение исходного кода из репозитория
        uses: actions/checkout@v3
      - name: Установка сборщика контейнеров
        uses: docker/setup-buildx-action@v2
      - name: Авторизация 
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
      - name: Push на DockerHub
        uses: docker/build-push-action@v4
        with:
          context: ./gateway/
          push: true
          tags: sof07/foodgram_gateway:latest
  deploy:
    runs-on: ubuntu-latest
    needs: 
      - build_and_push_to_docker_hub
      - build_frontend_and_push_to_docker_hub
      - build_gateway_and_push_to_docker_hub
    steps:
    - name: Checkout repo
      uses: actions/checkout@v3
    - name: Копируем docker-compose.production.yml на продакшен-сервер
      uses: appleboy/scp-action@master
      with:
        host: ${{ secrets.HOST }}
        username: ${{ secrets.USER }}
        key: ${{ secrets.SSH_KEY }}
        passphrase: ${{ secrets.SSH_PASSPHRASE }}
        source: "docker-compose.production.yml"
        target: "foodgram"
    - name: Выполнение удаленных команд ssh для развертывания
      uses: appleboy/ssh-action@master
      with:
        host: ${{ secrets.HOST }}
        username: ${{ secrets.USER }}
        key: ${{ secrets.SSH_KEY }}
        passphrase: ${{ secrets.SSH_PASSPHRASE }}
        script: |
          cd foodgram
          # Выполняет pull образов с Docker Hub
          sudo docker compose -f docker-compose.production.yml pull
          # Перезапускает все контейнеры в Docker Compose
          sudo docker compose -f docker-compose.production.yml down
          sudo docker compose -f docker-compose.production.yml up -d
          # Выполняет миграции и сбор статики
          sudo docker compose -f docker-compose.production.yml exec backend python manage.py migrate
          sudo docker compose -f docker-compose.production.yml exec backend python manage.py collectstatic
          sudo docker compose -f docker-compose.production.yml exec backend cp -r /app/collected_static/. /backend_static/static/  